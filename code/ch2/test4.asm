;演示汇编中的数据定义、地址计算和各种操作符

DATA SEGMENT
    ;========== ORG 指令：设置起始地址 ==========
    ORG 0               ;从地址0开始定义数据
    
    ARRAY LABEL BYTE    ;定义一个字节数组的标签（ARRAY指向地址0）
    
    ;========== 定义数组DA1 ==========
    DA1 DW 2,9,14,3,315H,-6   ;定义6个字（16位），共12个字节
                               ;地址：0-1: 2, 2-3: 9, 4-5: 14, 6-7: 3, 8-9: 315H, 10-11: -6
    
    ;========== 定义数组DA2 ==========
    DA2 DB 7,"ABCDEFG"        ;定义1个字节(7) + 7个字符，共8个字节
                               ;地址：12: 7, 13-19: A,B,C,D,E,F,G
    
    ;========== 计算DA2的长度 ==========
    LEN = $-DA2                ;$表示当前位置（地址20）
                               ;LEN = 20 - 12 = 8（DA2的字节数）
    
    ;========== ORG 100H：跳到地址100H ==========
    ORG 100H            ;之后的数据从地址100H开始定义（跳过空隙）
    
    ;========== 定义DA3和DA4 ==========
    DA3 DW DA4          ;DA3存储DA4的地址
    
    DA4 DB 4 DUP(2 DUP(1,2,3),4)
                        ;4 DUP() 表示重复4次
                        ;每次重复：2 DUP(1,2,3) 表示 1,2,3 重复2次，再加一个 4
                        ;展开为：1,2,3,1,2,3,4, 1,2,3,1,2,3,4, 1,2,3,1,2,3,4, 1,2,3,1,2,3,4
                        ;共 4 × 7 = 28 个字节
    
DATA ENDS

CODE SEGMENT
    ASSUME CS:CODE, DS:DATA
    
START:
    MOV AX, DATA
    MOV DS, AX
    
    ;========== 地址寻址 ==========
    MOV AL, ARRAY+2         ;AL = ARRAY地址+2字节处的数据
                            ;= 地址2处的数据 = 9（DA1的第二个字的低字节）
    
    ADD AL, DA2+1           ;AL += DA2地址+1字节处的数据
                            ;= AL + 地址13处的数据 = AL + 'B'(42H)
    
    ;========== 地址差计算 ==========
    MOV AX, DA2-DA1         ;AX = DA2地址 - DA1地址
                            ;= 12 - 0 = 12（从DA1到DA2相隔12个字节）
    
    ;========== 符号的长度 ==========
    MOV BL, LEN             ;BL = 8（之前定义的LEN = 8）
    
    ;========== 取地址值 ==========
    MOV AX, DA3             ;AX = DA3中存储的值（DA4的地址）
                            ;= 100H（DA4在地址100H）
    
    ;========== TYPE操作符：返回元素大小 ==========
    MOV BX, TYPE DA4        ;BX = DA4的类型大小
                            ;= 1（因为DA4定义为 DB，每个元素1字节）
    
    ;========== OFFSET操作符：返回偏移地址 ==========
    MOV BX, OFFSET DA4      ;BX = DA4的偏移地址
                            ;= 100H（相对于数据段的偏移）
    
    ;========== SIZE操作符：返回总字节数 ==========
    MOV CX, SIZE DA4        ;CX = DA4占用的总字节数
                            ;= 28（4 × 7 = 28个字节）
    
    ;========== LENGTH操作符：返回元素个数 ==========
    MOV DX, LENGTH DA4      ;DX = DA4的元素个数
                            ;= 28（共28个字节元素）
    
    ;========== WORD PTR：指定操作大小 ==========
    MOV BX, WORD PTR DA4    ;将DA4的前2个字节作为字(16位)读入
                            ;= 0201H（因为DA4前两个字节是1,2）
    
    ;========== 逻辑运算符：AND ==========
    MOV BL, LEN AND 0FH     ;BL = 8 AND 0FH = 8（取低4位）
                            ;= 00001000 AND 00001111 = 00001000 = 8
    
    ;========== 比较运算符：GT（大于）==========
    MOV BL, LEN GT 5        ;BL = (LEN > 5) ? 1 : 0
                            ;= (8 > 5) = TRUE = 1（非零值表示真）
                            ;如果是 LEN LT 5 则返回0
    
    ;========== 算术运算符：MOD（取模）==========
    MOV BL, LEN MOD 5       ;BL = 8 MOD 5（8除以5的余数）
                            ;= 3
    
    ;程序结束
    MOV AH, 4CH
    INT 21H

CODE ENDS
END START